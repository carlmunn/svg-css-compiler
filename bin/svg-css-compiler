#!/usr/bin/env node

const path    = require('path');
const fs      = require('fs');
const program = require('commander');

program.version('0.0.1.beta').
  option('-i, --input [string]', 'input directory').
  option('-o, --output [string]', 'output sprite to (default ./sprite.svg)').
  option('--html [string]', 'output html to (default ./sprites.html)').
  option('--config [string]', '(default svg-css-compiler-config.json)').
  option('-c, --css [type]', 'output css to (default ./sprites.css)' ).
  option('-v, --verbose', 'verbose' ).
  option('--stdout', 'output to standard output' ).
  option('--prefix-uri [string]', 'Prefix the location of the SVG files i.e </assets/icons/>file.svg' ).
  option('--prefix-sprite-uri [string]', 'Prefix location for the sprite SVG' ).
  parse(process.argv);

//program.on('--help', ()=>{});

const NAME        = '__sprites';
const INPUT       = program.input  || `./`;
const OUTPUT      = program.output || `${NAME}.svg`;
const HTML_OUTPUT = program.html   || `./${NAME}.html`;
const CSS         = program.css    || `./${NAME}.css`;
const CONFIG      = program.config || 'svg-css-compiler-config.json';

const libPath = path.join(fs.realpathSync(path.dirname(__filename)), '../lib');

if(program.verbose) console.log(`Input: ${INPUT}`, CSS);

const MainApp = require(libPath+'/main');
const Config  = require(libPath+'/config').Config;

const config_file = path.join(INPUT, CONFIG)
var config;

if(fs.existsSync(config_file)) {
  config = new Config(config_file);
} else {
  config = null;
}

const app = new MainApp({spriteName: NAME, program: program, config: config});

//if(!prompt('About to run without options, work this directory?')) return;

if(app.add(INPUT)) {
  if(program.verbose) console.info("SVG Files:", app.files().length);
  //if(program.stdout)  console.info("Output to STDOUT");
  
  // Send the SVG to file
  app.toFile(OUTPUT);

  if(program.stdout) console.info(app.renderCss({
    useScss:         true,
    prefixUri:       program.prefixUri,
    prefixSpriteUri: program.prefixSpriteUri,
    spriteName:      OUTPUT
  }));

  if(!program.stdout) app.toHtml({spriteName: OUTPUT, file: HTML_OUTPUT});
  
} else {
  if(program.verbose) console.error('No files found for:', INPUT)
}
